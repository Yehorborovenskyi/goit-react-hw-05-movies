{"version":3,"file":"static/js/787.8297fd51.chunk.js","mappings":"wNA8CA,UAzCgB,WACd,IAAQA,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAA8BE,EAAAA,EAAAA,UAAS,IAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KAeA,OAbAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAgB,mCAAG,8GAEEC,EAAAA,EAAAA,IAAkBP,GAFpB,OAEfQ,EAFe,OAGrBJ,EAAWI,EAASC,SAHC,gDAKrBC,QAAQC,IAAI,KAAMC,SALG,yDAAH,qDAStBN,GACD,GAAE,CAACN,KAGF,8BACsB,IAAnBG,EAAQU,QACP,4CAEA,wBACGV,EAAQW,KAAI,YAA8B,IAA3BC,EAA0B,EAA1BA,GAAIC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC1B,OACE,2BACE,oCAAYD,MACZ,uBAAIC,MAFGF,EAKZ,OAKV,C,6JCxCKG,EAAW,gCACXC,EAAU,mCAEDC,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,oGACyBC,MAAM,GAAD,OACvBH,EADuB,uCACgBC,EADhB,YAD9B,cACQX,EADR,yBAISA,EAASc,QAJlB,kEASO,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAAiCC,GAAjC,uFACkBH,MAAM,GAAD,OACvBH,EADuB,gCACSC,EADT,kBAC0BK,IAFjD,cACChB,EADD,yBAKEA,EAASc,QALX,kEAFP,KATA,WAEeF,OAAAA,EAAAA,MAAAA,KAAAA,UAAAA,EAiBR,IAAMK,EAAiB,mCAAG,WAAMzB,GAAN,uFACRqB,MAAM,GAAD,OACvBH,EADuB,iBACNlB,EADM,oBACamB,IAFV,cACzBX,EADyB,yBAIxBA,EAASc,QAJe,2CAAH,sDAOjBI,EAAc,mCAAG,WAAM1B,GAAN,uFACLqB,MAAM,GAAD,OACvBH,EADuB,iBACNlB,EADM,4BACqBmB,IAFrB,cACtBX,EADsB,yBAIrBA,EAASc,QAJY,2CAAH,sDAOdf,EAAiB,mCAAG,WAAMP,GAAN,uFACRqB,MAAM,GAAD,OACvBH,EADuB,iBACNlB,EADM,4BACqBmB,IAFlB,cACzBX,EADyB,yBAIxBA,EAASc,QAJe,2CAAH,qD,sBClC9B,SAASK,EAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQC,EAAKC,GACpE,IACE,IAAIC,EAAOP,EAAIK,GAAKC,GAChBE,EAAQD,EAAKC,KAInB,CAHE,MAAOC,GAEP,YADAP,EAAOO,EAET,CAEIF,EAAKG,KACPT,EAAQO,GAERG,QAAQV,QAAQO,GAAOI,KAAKT,EAAOC,EAEvC,CAEe,SAASS,EAAkBC,GACxC,OAAO,WACL,IAAIC,EAAOC,KACPC,EAAOC,UACX,OAAO,IAAIP,SAAQ,SAAUV,EAASC,GACpC,IAAIF,EAAMc,EAAGK,MAAMJ,EAAME,GAEzB,SAASd,EAAMK,GACbT,EAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQ,OAAQI,EAClE,CAEA,SAASJ,EAAOgB,GACdrB,EAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQ,QAASgB,EACnE,CAEAjB,OAAMkB,EACR,GACF,CACF,C","sources":["components/reviews/Reviews.js","services/fetch.js","../node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { fetchMovieReviews } from 'services/fetch';\nimport PropTypes from 'prop-types';\n\nconst Reviews = () => {\n  const { movieId } = useParams();\n  const [reviews, setReviews] = useState([]);\n\n  useEffect(() => {\n    const fetchReviewsData = async () => {\n      try {\n        const response = await fetchMovieReviews(movieId);\n        setReviews(response.results);\n      } catch (error) {\n        console.log(error.message);\n      }\n    };\n\n    fetchReviewsData();\n  }, [movieId]);\n\n  return (\n    <>\n      {reviews.length === 0 ? (\n        <p>Cast is unknown</p>\n      ) : (\n        <ul>\n          {reviews.map(({ id, author, content }) => {\n            return (\n              <li key={id}>\n                <p>Author: {author}</p>\n                <p>{content}</p>\n              </li>\n            );\n          })}\n        </ul>\n      )}\n    </>\n  );\n};\n\nReviews.propTypes = {\n  movieId: PropTypes.string,\n};\n\nexport default Reviews;\n","const BASE_URL = 'https://api.themoviedb.org/3/';\nconst API_KEY = 'e5bfb55386b809202657051ad29d231c';\n\nasync function fetchHome() {\n  const response = await fetch(\n    `${BASE_URL}trending/movie/week?api_key=${API_KEY}&page=1`\n  );\n  return response.json();\n}\n\nexport default fetchHome;\n\nexport async function fetchSearchMovies(query) {\n  const response = await fetch(\n    `${BASE_URL}search/movie?api_key=${API_KEY}&query=${query}`\n  );\n\n  return response.json();\n}\n\nexport const fetchMovieDetails = async movieId => {\n  const response = await fetch(\n    `${BASE_URL}movie/${movieId}?api_key=${API_KEY}`\n  );\n  return response.json();\n};\n\nexport const fetchMovieCast = async movieId => {\n  const response = await fetch(\n    `${BASE_URL}movie/${movieId}/credits?api_key=${API_KEY}`\n  );\n  return response.json();\n};\n\nexport const fetchMovieReviews = async movieId => {\n  const response = await fetch(\n    `${BASE_URL}movie/${movieId}/reviews?api_key=${API_KEY}`\n  );\n  return response.json();\n};\n","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nexport default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}"],"names":["movieId","useParams","useState","reviews","setReviews","useEffect","fetchReviewsData","fetchMovieReviews","response","results","console","log","message","length","map","id","author","content","BASE_URL","API_KEY","fetchHome","fetch","json","fetchSearchMovies","query","fetchMovieDetails","fetchMovieCast","asyncGeneratorStep","gen","resolve","reject","_next","_throw","key","arg","info","value","error","done","Promise","then","_asyncToGenerator","fn","self","this","args","arguments","apply","err","undefined"],"sourceRoot":""}